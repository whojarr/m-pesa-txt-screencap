org: dhunter
app: m-pesa-txt-screencap
service: m-pesa-txt-screencap
plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-domain-manager
package:
  exclude:
    - __pycache__/**
    - node_modules/**
    - venv/**
    - samples/**
provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: python3.8
  stage: '${opt:stage, ''dev''}'
  region: '${opt:region, ''ap-southeast-2''}'
  deploymentBucket:
    name: dcl-lambdas
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  tags:
    Product: ${self:service}
    environment: '${opt:stage, ''dev''}'
    Account: DCL
  environment:
    S3_BUCKET: ${self:service}-${self:provider.stage}
    SERVERLESS_STAGE: '${self:provider.stage}'
    TEAMS_URL: '${ssm:/${self:service}/${self:provider.stage}/teams_url}'
    APIKEY: '${ssm:/${self:service}/${self:provider.stage}/apikey}'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'lambda:InvokeFunction'
          Resource: '*'
        - Effect: Allow
          Action:
            - 's3:ListBucket'
          Resource: 'arn:aws:s3:::${self:service}-${self:provider.stage}'
        - Effect: Allow
          Action:
            - '*'
          Resource: 'arn:aws:s3:::${self:service}-${self:provider.stage}/*'
        - Effect: Allow
          Action:
            - 'rekognition:DetectText'
          Resource: '*'
        - Effect: Allow
          Action:
            - 'sts:*'
          Resource: '*'
          
functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  s3event:
    handler: app.s3event
    events:
      - s3:
          bucket: ${self:service}-${self:provider.stage}
          event: s3:ObjectCreated:*
          rules:
            - prefix: que/
          existing: true
custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: false
    slim: true
  customDomain:
    basePath: ''
    domainName: '${self:provider.stage}-${self:service}.${ssm:/${self:service}/${self:provider.stage}/domain_name}'
    stage: '${self:provider.stage}'
    createRoute53Record: true

resources:
  Resources:
    S3Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}